<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on</title><link>https://fastro.dev/docs/examples/</link><description>Recent content in Examples on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://fastro.dev/docs/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello world</title><link>https://fastro.dev/docs/examples/hello-world/</link><pubDate>Wed, 14 Oct 2020 15:21:01 +0200</pubDate><guid>https://fastro.dev/docs/examples/hello-world/</guid><description>Entry point # File main.ts
import application from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello world!&amp;quot;) await app.serve() How to run # deno run -A --unstable main.ts</description></item><item><title>Custom port</title><link>https://fastro.dev/docs/examples/custom-port/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://fastro.dev/docs/examples/custom-port/</guid><description>Entry point # File main.ts
import application from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello world!&amp;quot;) await app.serve({ port: 3000 }) How to run # deno run -A --unstable main.ts</description></item><item><title>HTML with Native Response</title><link>https://fastro.dev/docs/examples/html-with-native-response/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0201</pubDate><guid>https://fastro.dev/docs/examples/html-with-native-response/</guid><description>Entry point # File main.ts
import application from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; { return new Response(&amp;quot;&amp;lt;html&amp;gt; Hello world &amp;lt;/html&amp;gt;&amp;quot;, { status: 200, headers: { &amp;quot;content-type&amp;quot;: &amp;quot;text/html&amp;quot;, }, }) }) console.log(&amp;quot;Listening on: http://localhost:8000&amp;quot;) await app.serve() How to run # deno run -A --unstable main.ts</description></item><item><title>HTML with Fastro Response</title><link>https://fastro.dev/docs/examples/html-with-fastro-response/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0202</pubDate><guid>https://fastro.dev/docs/examples/html-with-fastro-response/</guid><description>Entry point # File main.ts
import application, { response } from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; { return response().html(&amp;quot;&amp;lt;h2&amp;gt;Hello world&amp;lt;/h2&amp;gt;&amp;quot;) }) console.log(&amp;quot;Listening on: http://localhost:8000&amp;quot;) await app.serve() How to run # deno run -A --unstable main.ts</description></item><item><title>JSON with Fastro Response</title><link>https://fastro.dev/docs/examples/json-with-fastro-response/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0202</pubDate><guid>https://fastro.dev/docs/examples/json-with-fastro-response/</guid><description>Entry point # File main.ts
import application, { response } from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; { return response().json({ text: &amp;quot;Hello world&amp;quot; }) }) console.log(&amp;quot;Listening on: http://localhost:8000&amp;quot;) await app.serve() How to run # deno run -A --unstable main.ts</description></item><item><title>JSX with Default Response</title><link>https://fastro.dev/docs/examples/jsx-with-default-response/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0202</pubDate><guid>https://fastro.dev/docs/examples/jsx-with-default-response/</guid><description>Entry point # File main.tsx
import application from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;) console.log(&amp;quot;Listening on: http://localhost:8000&amp;quot;) await app.serve() Configuration # File deno.json
{ &amp;quot;compilerOptions&amp;quot;: { &amp;quot;strict&amp;quot;: true, &amp;quot;jsx&amp;quot;: &amp;quot;react-jsx&amp;quot;, &amp;quot;jsxImportSource&amp;quot;: &amp;quot;https://esm.sh/react&amp;quot; } } How to run # deno run -A --unstable --config deno.json main.tsx</description></item><item><title>HTTP Status and Auth with Fastro Response</title><link>https://fastro.dev/docs/examples/http-status-and-auth/</link><pubDate>Mon, 12 Oct 2020 15:21:01 +0201</pubDate><guid>https://fastro.dev/docs/examples/http-status-and-auth/</guid><description>Entry point # File main.ts
import application, { response } from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/&amp;quot;, () =&amp;gt; { return response() .status(200) .authorization(&amp;quot;Basic YWxhZGRpbjpvcGVuc2VzYW1l&amp;quot;) .send(&amp;quot;status &amp;amp; basic auth&amp;quot;) }) console.log(&amp;quot;Listening on: http://localhost:8000&amp;quot;) await app.serve() How to run # deno run -A --unstable main.ts</description></item><item><title>Cookie with Native Response</title><link>https://fastro.dev/docs/examples/cookie-with-native-response/</link><pubDate>Sat, 10 Oct 2020 15:21:01 +0201</pubDate><guid>https://fastro.dev/docs/examples/cookie-with-native-response/</guid><description>Entry point # File main.ts
import { Cookie, deleteCookie, getCookies, setCookie, } from &amp;quot;https://deno.land/std@0.133.0/http/cookie.ts&amp;quot; import application from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/set&amp;quot;, () =&amp;gt; { const headers = new Headers() const cookie: Cookie = { name: &amp;quot;Space&amp;quot;, value: &amp;quot;Cat&amp;quot; } setCookie(headers, cookie) return new Response(JSON.stringify(cookie), { headers }) }) app.get(&amp;quot;/delete&amp;quot;, () =&amp;gt; { const headers = new Headers() deleteCookie(headers, &amp;quot;Space&amp;quot;) const cookies = getCookies(headers) return new Response(JSON.stringify(cookies), { headers, }) }) app.</description></item><item><title>Cookie with Fastro Response</title><link>https://fastro.dev/docs/examples/cookie-with-fastro-response/</link><pubDate>Fri, 09 Oct 2020 15:21:01 +0201</pubDate><guid>https://fastro.dev/docs/examples/cookie-with-fastro-response/</guid><description>Entry point # File main.ts
import application, { Cookie, getCookies, response, } from &amp;quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts&amp;quot; const app = application() app.get(&amp;quot;/set&amp;quot;, () =&amp;gt; { const cookie: Cookie = { name: &amp;quot;Space&amp;quot;, value: &amp;quot;Cat&amp;quot; } return response() .setCookie(cookie) .send(JSON.stringify(cookie)) }) app.get(&amp;quot;/delete&amp;quot;, () =&amp;gt; { return response() .deleteCookie(&amp;quot;Space&amp;quot;) .send(&amp;quot;Cookie deleted&amp;quot;) }) app.get(&amp;quot;/check&amp;quot;, (req: Request) =&amp;gt; { const cookie = getCookies(req.headers) return response().send(JSON.stringify(cookie)) }) console.log(&amp;quot;Listening on: http://localhost:8000&amp;quot;) await app.serve() How to run # deno run -A --unstable main.</description></item></channel></rss>