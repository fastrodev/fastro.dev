var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/prologue/requirements/",title:"Requirements",description:"How to install all fastro requirements",content:"Installation #   Install the Deno CLI. This is for mac. Other installation methods can be found here.\ncurl -fsSL https://deno.land/install.sh | sh    Ensure deno is available in the environment path\ndeno --version    Set up your environment #  Install vscode deno extension. Open the VS Code command palette with Ctrl+Shift+P, and run the Deno: Initialize Workspace Configuration command.  "}).add({id:1,href:"/docs/prologue/get-started/",title:"Getting Started",description:"How to start a simple web application.",content:"Create webapp directory #   This will be the working directory of your web application.\nmkdir webapp \u0026amp;\u0026amp; cd webapp    Open vscode editor from the working directory\ncode .    Create entry point file #   Create main.ts file.\n  This will be the entry point of Deno CLI.\nimport application from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; \u0026quot;Hello world\u0026quot;); await app.serve();    Run locally #   You can run the webapp from local\ndeno run -A --unstable main.ts    Or try running a simple program from repo:\ndeno run -A --unstable https://deno.land/x/fastro@v0.54.0/examples/main.ts    Deployments #   When clicking the \u0026ldquo;Deploy\u0026rdquo; button \u0026ndash; deno-deploy will automatically download all the application code and create a new deployment.\n\n  Other deployment methods can be seen here.\n  "}).add({id:2,href:"/docs/examples/hello-world/",title:"Hello world",description:"How to return hello world text",content:"Entry point # File main.ts\nimport application from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; \u0026quot;Hello world!\u0026quot;); await app.serve();  How to run # deno run -A --unstable main.ts  "}).add({id:3,href:"/docs/examples/custom-port/",title:"Custom port",description:"How to change the default port",content:"Entry point # File main.ts\nimport application from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; \u0026quot;Hello world!\u0026quot;); await app.serve({ port: 3000 });  How to run # deno run -A --unstable main.ts  "}).add({id:4,href:"/docs/examples/html-with-native-response/",title:"HTML with Native Response",description:"How to return html with native response",content:"Entry point # File main.ts\nimport application from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; { return new Response(\u0026quot;\u0026lt;html\u0026gt; Hello world \u0026lt;/html\u0026gt;\u0026quot;, { status: 200, headers: { \u0026quot;content-type\u0026quot;: \u0026quot;text/html\u0026quot;, }, }); }); console.log(\u0026quot;Listening on: http://localhost:8000\u0026quot;); await app.serve();  How to run # deno run -A --unstable main.ts  "}).add({id:5,href:"/docs/examples/html-with-fastro-response/",title:"HTML with Fastro Response",description:"How to return html with Fastro Response",content:"Entry point # File main.ts\nimport application, { response } from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; { const res = response(); return res.html(\u0026quot;\u0026lt;h2\u0026gt;Hello world\u0026lt;/h2\u0026gt;\u0026quot;); }); console.log(\u0026quot;Listening on: http://localhost:8000\u0026quot;); await app.serve();  How to run # deno run -A --unstable main.ts  "}).add({id:6,href:"/docs/examples/json-with-fastro-response/",title:"JSON with Fastro Response",description:"How to return JSON with Fastro Response",content:"Entry point # File main.ts\nimport application, { response } from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; { const res = response(); return res.json({ text: \u0026quot;Hello world\u0026quot; }); }); console.log(\u0026quot;Listening on: http://localhost:8000\u0026quot;); await app.serve();  How to run # deno run -A --unstable main.ts  "}).add({id:7,href:"/docs/examples/jsx-with-default-response/",title:"JSX with Default Response",description:"How to return html with JSX Default Response",content:"Entry point # File main.tsx\nimport application from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; \u0026lt;h1\u0026gt;Hello world\u0026lt;/h1\u0026gt;); console.log(\u0026quot;Listening on: http://localhost:8000\u0026quot;); await app.serve();  Configuration # File deno.json\n{ \u0026quot;compilerOptions\u0026quot;: { \u0026quot;strict\u0026quot;: true, \u0026quot;jsx\u0026quot;: \u0026quot;react-jsx\u0026quot;, \u0026quot;jsxImportSource\u0026quot;: \u0026quot;https://esm.sh/react\u0026quot; } }  How to run # deno run -A --unstable --config deno.json main.tsx  "}).add({id:8,href:"/docs/examples/http-status-and-auth/",title:"HTTP Status and Auth",description:"How to set http status and auth",content:"Entry point # File main.ts\nimport application, { response } from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/\u0026quot;, () =\u0026gt; { const res = response(); return res.status(200) .authorization(\u0026quot;Basic YWxhZGRpbjpvcGVuc2VzYW1l\u0026quot;) .send(\u0026quot;status \u0026amp; basic auth\u0026quot;); }); console.log(\u0026quot;Listening on: http://localhost:8000\u0026quot;); await app.serve();  How to run # deno run -A --unstable main.ts  "}).add({id:9,href:"/docs/examples/cookie-with-fastro-response/",title:"Cookie with Fastro Response",description:"How to manage cookies",content:"Entry point # File main.ts\nimport application, { Cookie, getCookies, response, } from \u0026quot;https://deno.land/x/fastro@v0.54.0/server/mod.ts\u0026quot;; const app = application(); app.get(\u0026quot;/set\u0026quot;, () =\u0026gt; { const res = response(); const cookie: Cookie = { name: \u0026quot;Space\u0026quot;, value: \u0026quot;Cat\u0026quot; }; return res.setCookie(cookie) .send(JSON.stringify(cookie)); }); app.get(\u0026quot;/delete\u0026quot;, () =\u0026gt; { const res = response(); return res.deleteCookie(\u0026quot;Space\u0026quot;).send(\u0026quot;Cookie deleted\u0026quot;); }); app.get(\u0026quot;/check\u0026quot;, (req: Request) =\u0026gt; { const res = response(); const cookie = getCookies(req.headers); return res.send(JSON.stringify(cookie)); }); console.log(\u0026quot;Listening on: http://localhost:8000\u0026quot;); await app.serve();  How to run # deno run -A --unstable main.ts  "}).add({id:10,href:"/docs/examples/",title:"Examples",description:"Examples",content:""}).add({id:11,href:"/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}).add({id:12,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()